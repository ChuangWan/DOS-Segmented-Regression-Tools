library("segmented", lib.loc="~/R/win-library/3.1")
# Function to run segmented over data
# Given an input of a linear-modeled variable, number of breakpoints to
# specify, and either 0, 1, or 2 guessed breakpoint locations:
# 	Run segmented over data
# Output: segmented output in a list
# REQUIRED PACKAGE: segmented
DOSI.segmented <- function(var,specifiedBPs,segmentedBP1,segmentedBP2){
try({
if (specifiedBPs == 0){
varOut <- segmented(var,seg.Z=~x,psi=list(x=NA),
control=seg.control(stop.if.error=FALSE,n.boot=0,
it.max=seg.it))
} else if (specifiedBPs == 1){
varOut <- segmented(var,seg.Z=~x,psi=list(x=segmentedBP1),
control=seg.control(display=FALSE,n.boot=50,
it.max=seg.it))
} else if (specifiedBPs == 2){
varOut <- segmented(var,seg.Z=~x,psi=list(x=c(segmentedBP1,segmentedBP2)),
control=seg.control(display=FALSE,n.boot=50,
it.max=seg.it))
} # end specified bp conditionals
}) # end try statement
# If the method fails, fill breakpoint data with a dummy value
if(exists("varOut")==FALSE){
varOut <- vector(mode="list", length=0)
varOut$psi <- matrix(0, nrow = 2, ncol = 3)
}
return(varOut)
}
# Test code #
# Generate pre-requisites
csv <- dir(pattern="*csv")
# Assign Data
csvData		<- read.csv(csv[1],header = TRUE)
normTime	<- csvData[[1]]-min(csvData[[1]])
BO  <- data.frame(x=normTime, y=csvData[[2]])
BR  <- data.frame(x=normTime, y=csvData[[3]])
BT  <- data.frame(x=normTime, y=csvData[[4]])
BS  <- data.frame(x=normTime, y=csvData[[5]])
# Convert data into linear models
lin	<- list(
"oBO"  = lm.BO  <- lm(y~x,data=BO),
"oBR"  = lm.BR  <- lm(y~x,data=BR),
"oBT"  = lm.BT  <- lm(y~x,data=BT),
"oBS"  = lm.BS  <- lm(y~x,data=BS)
)
# Specify bootstrap iterations to find breakpoints
seg.it <- 10
# Specify breakpoints
segmentedMethod	<- 2
segmentedBP1	<- 3
segmentedBP2	<- 7
# Call function
if (exists("bpOutput")==FALSE){
bpOutput <- sapply(lin,DOSI.segmented,2,3,7,simplify=FALSE,USE.NAMES=TRUE)}
# HbO2 (oBO) should have breakpoints around 0.5 min and 7.6 min
# HbR (oBR) should have breakpoints around 0.5 min and 5.7 min
# See sample figure for a visualization
bpOutput
save(bpOutput,file="bpOutput")
library("segmented", lib.loc="~/R/win-library/3.1")
# Function to run segmented over data
# Given an input of a linear-modeled variable, number of breakpoints to
# specify, and either 0, 1, or 2 guessed breakpoint locations:
# 	Run segmented over data
# Output: segmented output in a list
# REQUIRED PACKAGE: segmented
DOSI.segmented <- function(var,specifiedBPs,segmentedBP1,segmentedBP2){
try({
if (specifiedBPs == 0){
varOut <- segmented(var,seg.Z=~x,psi=list(x=NA),
control=seg.control(stop.if.error=FALSE,n.boot=0,
it.max=seg.it))
} else if (specifiedBPs == 1){
varOut <- segmented(var,seg.Z=~x,psi=list(x=segmentedBP1),
control=seg.control(display=FALSE,n.boot=50,
it.max=seg.it))
} else if (specifiedBPs == 2){
varOut <- segmented(var,seg.Z=~x,psi=list(x=c(segmentedBP1,segmentedBP2)),
control=seg.control(display=FALSE,n.boot=50,
it.max=seg.it))
} # end specified bp conditionals
}) # end try statement
# If the method fails, fill breakpoint data with a dummy value
if(exists("varOut")==FALSE){
varOut <- vector(mode="list", length=0)
varOut$psi <- matrix(0, nrow = 2, ncol = 3)
}
return(varOut)
}
# Test code #
# Generate pre-requisites
csv <- dir(pattern="*csv")
# Assign Data
csvData		<- read.csv(csv[1],header = TRUE)
normTime	<- csvData[[1]]-min(csvData[[1]])
BO  <- data.frame(x=normTime, y=csvData[[2]])
BR  <- data.frame(x=normTime, y=csvData[[3]])
BT  <- data.frame(x=normTime, y=csvData[[4]])
BS  <- data.frame(x=normTime, y=csvData[[5]])
# Convert data into linear models
lin	<- list(
"oBO"  = lm.BO  <- lm(y~x,data=BO),
"oBR"  = lm.BR  <- lm(y~x,data=BR),
"oBT"  = lm.BT  <- lm(y~x,data=BT),
"oBS"  = lm.BS  <- lm(y~x,data=BS)
)
# Specify bootstrap iterations to find breakpoints
seg.it <- 10
# Specify breakpoints
segmentedMethod	<- 2
segmentedBP1	<- 3
segmentedBP2	<- 7
# Call function
if (exists("bpOutput")==FALSE){
bpOutput <- sapply(lin,DOSI.segmented,2,3,7,simplify=FALSE,USE.NAMES=TRUE)}
# HbO2 (oBO) should have breakpoints around 0.5 min and 7.6 min
# HbR (oBR) should have breakpoints around 0.5 min and 5.7 min
# See sample figure for a visualization
bpOutput
detach("package:segmented", unload=TRUE)
bpOutput
# Create pre-requisite sample data
csv <- dir(pattern="*csv")
# Assign Data
csvExeData		<- read.csv(csv[1],header = TRUE)
normTime	<- csvData[[1]]-min(csvData[[1]])
exeTime	<- csvExeData[[1]]
VOK		<- data.frame(x=exeTime, y=csvExeData[[7]])
VE		<- data.frame(x=exeTime, y=csvExeData[[9]])
HR		<- data.frame(x=exeTime, y=csvExeData[[10]])
W		<- data.frame(x=exeTime, y=csvExeData[[13]])
outputFileName <- "EXO-1 AaAa V3 11-11-11 "
# Output: data frame
collectBPdata <- function(argv){
# Pre-allocate temporary vectors
# Segmented variables of interest
bpEstX      <- vector()
bpEstY      <- vector()
bpWork      <- vector()
bpRelTime   <- vector()
lConf       <- vector()
uConf       <- vector()
confDiff    <- vector()
# Exercise variables of interest
bpAvgW        <- vector()
bpAvgWstDev   <- vector()
bpAvgVOK      <- vector()
bpAvgVOKstDev <- vector()
bpAvgHR       <- vector()
bpAvgHRstDev  <- vector()
bpAvgVE       <- vector()
bpAvgVEstDev  <- vector()
# Span over which to average exercise data
span	<- (5/60)
# Try statement ensures that there is an array for sapply, even if
# there is no applicable data
try({
if(length(argv$psi[,2])>=1){
for (iConfint in 1:length(argv$psi[,2])){
# Collect confint data
bpEstX[iConfint]   <- confint(argv)[[1]][[iConfint]]
bpEstY[iConfint]   <- argv$fitted.values[which(abs(argv$psi[iConfint,2]-argv$model$x)==
min(abs(argv$psi[iConfint,2]-argv$model$x)))]
lConf[iConfint]    <- confint(argv)[[1]][length(argv$psi[,2])*1+iConfint]
uConf[iConfint]    <- confint(argv)[[1]][length(argv$psi[,2])*2+iConfint]
confDiff[iConfint] <- abs(lConf[iConfint]-bpEstX[iConfint])
# Find equivalent exercise data by averaging exe data +/- 5 seconds noted by breakpoint
# Get equivalent time indicies +/- 5 seconds noted by breakpoint
equivExeTime       <- exeTime[which(abs(bpEstX[iConfint]-exeTime)==min(abs(bpEstX[iConfint]-exeTime)))]
indLequivExeTime   <- which(abs((equivExeTime-span)-exeTime)==min(abs((equivExeTime-span)-exeTime)))
indUequivExeTime   <- which(abs((equivExeTime+span)-exeTime)==min(abs((equivExeTime+span)-exeTime)))
# Average exe data over +/- 5 seconds from breakpoint
bpAvgW[iConfint]      <- mean(W$y[indLequivExeTime[1]:indUequivExeTime[1]])
bpAvgWstDev[iConfint] <- sd(W$y[indLequivExeTime[1]:indUequivExeTime[1]])
bpAvgVOK[iConfint]      <- mean(VOK$y[indLequivExeTime[1]:indUequivExeTime[1]])
bpAvgVOKstDev[iConfint] <- sd(VOK$y[indLequivExeTime[1]:indUequivExeTime[1]])
bpAvgHR[iConfint]      <- mean(HR$y[indLequivExeTime[1]:indUequivExeTime[1]])
bpAvgHRstDev[iConfint] <- sd(HR$y[indLequivExeTime[1]:indUequivExeTime[1]])
bpAvgVE[iConfint]      <- mean(VE$y[indLequivExeTime[1]:indUequivExeTime[1]])
bpAvgVEstDev[iConfint] <- sd(VE$y[indLequivExeTime[1]:indUequivExeTime[1]])
# Find breakpoint time/total ramp time
bpRelTime[iConfint] <- bpEstX[iConfint]/max(normTime)
}
}
})
confintData <- data.frame(# Segmented variables of interest
bpEstX,bpEstY,lConf,uConf,confDiff,
# Exercises Variables of interest
bpAvgW,bpAvgWstDev,
bpAvgVOK,bpAvgVOKstDev,
bpAvgHR,bpAvgHRstDev,
bpAvgVE,bpAvgVEstDev,
bpRelTime)
return(confintData)
}
bpOutput2<-sapply(bpOutput,collectBPdata,simplify=FALSE,USE.NAMES=TRUE)
# Write segmented data into a text file
for(ibpOutput in 1:length(bpOutput2)){
write.table(paste(names(bpOutput)[ibpOutput]),
paste(outputFileName,"Data.csv",sep=""), sep=",", append=TRUE,
row.names=FALSE)
write.table(bpOutput2[ibpOutput],
paste(outputFileName,"Data.csv",sep=""), sep=",", append=TRUE,
row.names=FALSE)
}
load("bpOutput")
setwd("C:/Users/Brian/Google Drive/MATLAB/Scripts/DOSI Processing/Port to R/Validation tests/collect individual breakpoint data")
load("bpOutput")
bpOutput
remove(bpOutput)
load("bpOutput")
bpOutput
collectBPdata(bpOutput$oBR)
max(W)
View(W)
# Assign Data
csvExeData		<- read.csv(csv[1],header = TRUE)
normTime	<- csvData[[1]]-min(csvData[[1]])
exeTime	<- csvExeData[[1]]
VOK		<- data.frame(x=exeTime, y=csvExeData[[7]])
VE		<- data.frame(x=exeTime, y=csvExeData[[9]])
HR		<- data.frame(x=exeTime, y=csvExeData[[10]])
W		<- data.frame(x=exeTime, y=csvExeData[[13]])
# Create pre-requisite sample data
csv <- dir(pattern="*csv")
# Assign Data
csvExeData		<- read.csv(csv[1],header = TRUE)
normTime	<- csvData[[1]]-min(csvData[[1]])
exeTime	<- csvExeData[[1]]
VOK		<- data.frame(x=exeTime, y=csvExeData[[7]])
VE		<- data.frame(x=exeTime, y=csvExeData[[9]])
HR		<- data.frame(x=exeTime, y=csvExeData[[10]])
W		<- data.frame(x=exeTime, y=csvExeData[[13]])
View(W)
# Call function over all variables
bpOutput2<-sapply(bpOutput,collectBPdata,simplify=FALSE,USE.NAMES=TRUE)
# Write segmented data into a text file
for(ibpOutput in 1:length(bpOutput2)){
write.table(paste(names(bpOutput)[ibpOutput]),
paste(outputFileName,"Data.csv",sep=""), sep=",", append=TRUE,
row.names=FALSE)
write.table(bpOutput2[ibpOutput],
paste(outputFileName,"Data.csv",sep=""), sep=",", append=TRUE,
row.names=FALSE)
}
setwd("C:/Users/Brian/Google Drive/MATLAB/Scripts/DOSI Processing/Port to R/Validation tests/collect individual breakpoint data")
load(bpOutput)
load(bpOutPut)
load(bpOutput)
load("bpOutput"
)
bpOutput
library("segmented", lib.loc="~/R/win-library/3.1")
load("bpOutput")
bpOutput
# Create pre-requisite sample data
csv <- dir(pattern="*csv")
# Assign Data
csvExeData		<- read.csv(csv[1],header = TRUE)
normTime	<- csvData[[1]]-min(csvData[[1]])
exeTime	<- csvExeData[[1]]
VOK		<- data.frame(x=exeTime, y=csvExeData[[7]])
VE		<- data.frame(x=exeTime, y=csvExeData[[9]])
HR		<- data.frame(x=exeTime, y=csvExeData[[10]])
W		<- data.frame(x=exeTime, y=csvExeData[[13]])
outputFileName <- "EXO-1 AaAa V3 11-11-11 "
# Function to collect individual breakpoint data
# Given a 'segmented' output for a particular variable:
#	for every breakpoint:
#		collect its X/Y-axis info, confidence intervals
#		collect exercise data at equivlanet timepoint averaged
#			+/- span (e.g. +/- 5 seconds)
#		compile this data into a data frame
# Output: data frame
collectBPdata <- function(argv){
# Pre-allocate temporary vectors
# Segmented variables of interest
bpEstX      <- vector()
bpEstY      <- vector()
bpWork      <- vector()
bpRelTime   <- vector()
lConf       <- vector()
uConf       <- vector()
confDiff    <- vector()
# Exercise variables of interest
bpAvgW        <- vector()
bpAvgWstDev   <- vector()
bpAvgVOK      <- vector()
bpAvgVOKstDev <- vector()
bpAvgHR       <- vector()
bpAvgHRstDev  <- vector()
bpAvgVE       <- vector()
bpAvgVEstDev  <- vector()
# Span over which to average exercise data
span	<- (5/60)
# Try statement ensures that there is an array for sapply, even if
# there is no applicable data
try({
if(length(argv$psi[,2])>=1){
for (iConfint in 1:length(argv$psi[,2])){
# Collect confint data
bpEstX[iConfint]   <- confint(argv)[[1]][[iConfint]]
bpEstY[iConfint]   <- argv$fitted.values[which(abs(argv$psi[iConfint,2]-argv$model$x)==
min(abs(argv$psi[iConfint,2]-argv$model$x)))]
lConf[iConfint]    <- confint(argv)[[1]][length(argv$psi[,2])*1+iConfint]
uConf[iConfint]    <- confint(argv)[[1]][length(argv$psi[,2])*2+iConfint]
confDiff[iConfint] <- abs(lConf[iConfint]-bpEstX[iConfint])
# Find equivalent exercise data by averaging exe data +/- 5 seconds noted by breakpoint
# Get equivalent time indicies +/- 5 seconds noted by breakpoint
equivExeTime       <- exeTime[which(abs(bpEstX[iConfint]-exeTime)==min(abs(bpEstX[iConfint]-exeTime)))]
indLequivExeTime   <- which(abs((equivExeTime-span)-exeTime)==min(abs((equivExeTime-span)-exeTime)))
indUequivExeTime   <- which(abs((equivExeTime+span)-exeTime)==min(abs((equivExeTime+span)-exeTime)))
# Average exe data over +/- 5 seconds from breakpoint
bpAvgW[iConfint]      <- mean(W$y[indLequivExeTime[1]:indUequivExeTime[1]])
bpAvgWstDev[iConfint] <- sd(W$y[indLequivExeTime[1]:indUequivExeTime[1]])
bpAvgVOK[iConfint]      <- mean(VOK$y[indLequivExeTime[1]:indUequivExeTime[1]])
bpAvgVOKstDev[iConfint] <- sd(VOK$y[indLequivExeTime[1]:indUequivExeTime[1]])
bpAvgHR[iConfint]      <- mean(HR$y[indLequivExeTime[1]:indUequivExeTime[1]])
bpAvgHRstDev[iConfint] <- sd(HR$y[indLequivExeTime[1]:indUequivExeTime[1]])
bpAvgVE[iConfint]      <- mean(VE$y[indLequivExeTime[1]:indUequivExeTime[1]])
bpAvgVEstDev[iConfint] <- sd(VE$y[indLequivExeTime[1]:indUequivExeTime[1]])
# Find breakpoint time/total ramp time
bpRelTime[iConfint] <- bpEstX[iConfint]/max(normTime)
}
}
})
confintData <- data.frame(# Segmented variables of interest
bpEstX,bpEstY,lConf,uConf,confDiff,
# Exercises Variables of interest
bpAvgW,bpAvgWstDev,
bpAvgVOK,bpAvgVOKstDev,
bpAvgHR,bpAvgHRstDev,
bpAvgVE,bpAvgVEstDev,
bpRelTime)
return(confintData)
}
# Call function over all variables
bpOutput2<-sapply(bpOutput,collectBPdata,simplify=FALSE,USE.NAMES=TRUE)
# Write segmented data into a text file
for(ibpOutput in 1:length(bpOutput2)){
write.table(paste(names(bpOutput)[ibpOutput]),
paste(outputFileName,"Data.csv",sep=""), sep=",", append=TRUE,
row.names=FALSE)
write.table(bpOutput2[ibpOutput],
paste(outputFileName,"Data.csv",sep=""), sep=",", append=TRUE,
row.names=FALSE)
}
csvExeData		<- read.csv(csv[1],header = TRUE)
normTime	<- csvData[[1]]-min(csvData[[1]])
exeTime	<- csvExeData[[1]]
VOK		<- data.frame(x=exeTime, y=csvExeData[[7]])
VE		<- data.frame(x=exeTime, y=csvExeData[[9]])
HR		<- data.frame(x=exeTime, y=csvExeData[[10]])
W		<- data.frame(x=exeTime, y=csvExeData[[13]])
# Create pre-requisite sample data
csv <- dir(pattern="*csv")
# Assign Data
csvExeData		<- read.csv(csv[1],header = TRUE)
normTime	<- csvData[[1]]-min(csvExeData[[1]])
exeTime	<- csvExeData[[1]]
VOK		<- data.frame(x=exeTime, y=csvExeData[[7]])
VE		<- data.frame(x=exeTime, y=csvExeData[[9]])
HR		<- data.frame(x=exeTime, y=csvExeData[[10]])
W		<- data.frame(x=exeTime, y=csvExeData[[13]])
# Create pre-requisite sample data
csv <- dir(pattern="*csv")
# Assign Data
csvExeData		<- read.csv(csv[1],header = TRUE)
normTime	<- csvExeData[[1]]-min(csvExeData[[1]])
exeTime	<- csvExeData[[1]]
VOK		<- data.frame(x=exeTime, y=csvExeData[[7]])
VE		<- data.frame(x=exeTime, y=csvExeData[[9]])
HR		<- data.frame(x=exeTime, y=csvExeData[[10]])
W		<- data.frame(x=exeTime, y=csvExeData[[13]])
bpOutput2<-sapply(bpOutput,collectBPdata,simplify=FALSE,USE.NAMES=TRUE)
# Write segmented data into a text file
for(ibpOutput in 1:length(bpOutput2)){
write.table(paste(names(bpOutput)[ibpOutput]),
paste(outputFileName,"Data.csv",sep=""), sep=",", append=TRUE,
row.names=FALSE)
write.table(bpOutput2[ibpOutput],
paste(outputFileName,"Data.csv",sep=""), sep=",", append=TRUE,
row.names=FALSE)
}
