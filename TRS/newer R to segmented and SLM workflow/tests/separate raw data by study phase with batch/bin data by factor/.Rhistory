setwd("C:/Users/Brian/Google Drive/MATLAB/Scripts/DOSI Processing/Port to R/Validation tests/separate raw data by study phase/split data into study phases via marker")
load("study phase markers batch file.txt")
read.table("study phase markers batch file.txt", header=TRUE)
table <- read.table("study phase markers batch file.txt", header=TRUE)
table
View(table)
View(table)
setwd("C:/Users/Brian/Google Drive/MATLAB/Scripts/DOSI Processing/Port to R/Validation tests/separate raw data by study phase/split data into study phases via marker")
table <- read.table("study phase markers batch file.txt", header=TRUE)
table
table[[1]]
table[[2]]
table[[3]]
table[[1]][1:end]
table[[1]][1:6]
table[[2]][1]
table[[2]][2]
table[2][2]
table[[2:6]][2]
table[[2:3]][2]
table[[3]][2]
table[[3]][5]
View(table)
csv<-dir('*.csv')
csv<-dir("*.csv")
setwd("C:/Users/Brian/Google Drive/MATLAB/Scripts/DOSI Processing/Port to R/Validation tests/separate raw data by study phase/split data into study phases via marker")
csv<-dir("*.csv")
csv<-dir(pattern="*.csv")
csv
load(csv[2])
read.table(csv[2])
data<-read.table(csv[2])
View(data)
read.csv(csv[2])
data<-read.csv(csv[2])
View(data)
View(data)
which(data$Marker==1)
which(data$Marker==2)
data$Marker[:]
data$Marker[1:length(data$Marker)]
data$Marker[which(data$Marker==1):which(data$Marker==2)]
data$Marker[which(data$Marker==1):which(data$Marker==2)-1]
data$Marker[which(data$Marker==1):(which(data$Marker==2)-1)]
data[1]
data[1][2]
data[[1]][2]
data[[1]][[which(data$Marker==1):(which(data$Marker==2)-1)]]
data[1][2:3]
data[1:5,]
data[[which(data$Marker==1):(which(data$Marker==2)-1)],]
data[which(data$Marker==1):(which(data$Marker==2)-1),]
length(data)
length(data[1,])
length(data[,1])
data[]
# Find indicies for markers
findClosest <- function(value,lookHere){
ind	<- which(abs((value)-lookHere)==min(abs((value)-lookHere)))
return(ind)
}
findClosest(1,data$Marker)
findClosest(4,data$Marker)
findClosest(11.09,data$ElapsTime)
findClosest(11.15,data$ElapsTime)
dir.create("temp")
setwd("temp")
dir.create("tmp")
file.remove("tmp")
unlink("tmp")
setwd("..")
dir.create("tmp")
dir.create("tmp temps")
csv <- dir(pattern="*.csv")
setwd("C:/Users/Brian/Google Drive/MATLAB/Scripts/DOSI Processing/Port to R/Validation tests/separate raw data by study phase/bin data by factor")
table <-read.csv2(csv[1])
setwd("C:/Users/Brian/Google Drive/MATLAB/Scripts/DOSI Processing/Port to R/Validation tests/separate raw data by study phase/bin data by factor")
csv[1]
read.csv(csv[1])
read.csv('test')
read.csv('test.csv')
data<-read.csv('test.csv')
View(data)
dosdata<-read.csv('test.csv')
binEdges <- seq(from=dosdata$ElapsTime[1],to=dosdata$ElapsTime[length(dosdata$ElapsTime)],10/60)
cuts <- cut(dosdata$ElapsTime,breaks=binEdges,right=FALSE)
binMeans <- aggregate(dosdata$ElapsTime, list(cuts),mean)
View(binMeans)
uneqBinMeans	<- function(binSize,timeAxis,data){
# Generate linearlay spaced intervals for binning
binEdges	<- seq(from=time[1],to=time[length(time)],by=binSize)
# Cut data into intervals
cuts	<- cut(data, breaks=binEdges, right=FALSE)
# Mean Data
binMeans	<- aggregate(data, list(cuts), mean)
return(binMeans)
}
read.csv("exeSample")
read.csv("exeSample.csv")
exeData <- read.csv("exeSample.csv")
View(exeData)
test <- uneqBinMeans(10/60,exeData$time,exeData$time)
test <- uneqBinMeans(10/60,dosdata$ElapsTime,dosdata$ElapsTime)
dosdata$ElapsTime[1]
binEdges <- seq(from=dosdata$ElapsTime[1],to=dosdata$ElapsTime[length(dosdata$ElapsTime)],by=10/60)
testfunc <- function(argv){
binEdges <- seq(from=argv[1],to=argv[length(argv)],by=10/60)
}
testfunc(dosdata$ElapsTime)
testfunc <- function(argv){
binEdges <- seq(from=argv[1],to=argv[length(argv)],by=10/60)
# Cut data into intervals
cuts	<- cut(data, breaks=binEdges, right=FALSE)
}
testfunc(dosdata$ElapsTime)
binEdges <- seq(from=dosdata$ElapsTime[1],to=dosdata$ElapsTime[length(dosdata$ElapsTime)],by=10/60)
cuts <-cut(dosdata$ElapsTime,breaks=binEdges,right=FALSE)
testfunc <- function(argv){
binEdges <- seq(from=argv[1],to=argv[length(argv)],by=10/60)
# Cut data into intervals
cuts	<- cut(argv, breaks=binEdges, right=FALSE)
}
testfunc(dosdata$ElapsTime)
testfunc <- function(argv){
binEdges <- seq(from=argv[1],to=argv[length(argv)],by=10/60)
# Cut data into intervals
cuts	<- cut(argv, breaks=binEdges, right=FALSE)
# Mean Data
binMeans	<- aggregate(argv, list(cuts), mean)
return(binMeans)
}
binMeans <- testfunc(dosdata$ElapsTime)
View(binMeans)
binMeans <- testfunc(exeData$time)
uneqBinMeans(10/60,exeData$time,exeData$time)
uneqBinMeans(10/60,exeData$time,exeData$time)
uneqBinMeans	<- function(binSize,timeAxis,data){
# Generate linearlay spaced intervals for binning
binEdges	<- seq(from=timeAxis[1],to=timeAxis[length(timeAxis)],by=binSize)
# Cut data into intervals
cuts	<- cut(data, breaks=binEdges, right=FALSE)
# Mean Data
binMeans	<- aggregate(data, list(cuts), mean)
return(binMeans)
}
uneqBinMeans(10/60,exeData$time,exeData$time)
uneqBinMeans(10/60,exeData$time,exeData$VEO)
cits
cuts
logical(length=1)
1:4
flagforbin = logical(length(dosdata$ElapsTime))
allIdx = 1:length(dosdata$ElapsTime)
idx = allIdx[timeAxis>=binEdges[2] & timeAxis<=binEdges[3]]
idx = allIdx[dosdata$ElapsTime>=binEdges[2] & dosdata$ElapsTime<=binEdges[3]]
idx
uneqBinMeans	<- function(binSize,timeAxis,data){
# Generate linearlay spaced intervals for binning
binEdges	<- seq(from=timeAxis[1],to=(timeAxis[length(timeAxis)]+binSize),by=binSize)
# Initialize binMeans vector
binMeans <- vector(length = length(binEdges))
for(iBinEdge in 1:length(binEdges)){
# Initialize/reset flags
flagforbin = logical(length(timeAxis))
# Flag data that fits into current bin
allIdx = 1:length(timeAxis)
idx = allIdx[timeAxis>=binEdges[iBinEdge] & timeAxis<=binEdges[iBinEdge+1]]
flagforbin[idx] = TRUE
# Assign data to bin and mean
binMeans[iBinEdge] = mean(data[flagforbin])
}
return(binMeans)
}
uneqBinMeans(10/60,dosdata$ElapsTime,dosdata$ElapsTime)
uneqBinMeans(10/60,dosdata$ElapsTime,dosdata$HbO2)
uneqBinMeans	<- function(binSize,timeAxis,data){
# Generate linearlay spaced intervals for binning
binEdges	<- seq(from=timeAxis[1],to=(timeAxis[length(timeAxis)]+binSize),by=binSize)
# Initialize binMeans vector
binMeans <- vector(length = length(binEdges)-1)
for(iBinEdge in 1:length(binEdges)){
# Initialize/reset flags
flagforbin = logical(length(timeAxis))
# Flag data that fits into current bin
allIdx = 1:length(timeAxis)
idx = allIdx[timeAxis>=binEdges[iBinEdge] & timeAxis<=binEdges[iBinEdge+1]]
flagforbin[idx] = TRUE
# Assign data to bin and mean
binMeans[iBinEdge] = mean(data[flagforbin])
}
return(binMeans)
}
uneqBinMeans(10/60,dosdata$ElapsTime,dosdata$HbO2)
uneqBinMeans	<- function(binSize,timeAxis,data){
# Generate linearlay spaced intervals for binning
binEdges	<- seq(from=timeAxis[1],to=(timeAxis[length(timeAxis)]+binSize),by=binSize)
# Initialize binMeans vector
binMeans <- vector(length = (length(binEdges)-1))
for(iBinEdge in 1:length(binEdges)){
# Initialize/reset flags
flagforbin = logical(length(timeAxis))
# Flag data that fits into current bin
allIdx = 1:length(timeAxis)
idx = allIdx[timeAxis>=binEdges[iBinEdge] & timeAxis<=binEdges[iBinEdge+1]]
flagforbin[idx] = TRUE
# Assign data to bin and mean
binMeans[iBinEdge] = mean(data[flagforbin])
}
return(binMeans)
}
uneqBinMeans(10/60,dosdata$ElapsTime,dosdata$HbO2)
uneqBinMeans	<- function(binSize,timeAxis,data){
# Generate linearlay spaced intervals for binning
binEdges	<- seq(from=timeAxis[1],to=(timeAxis[length(timeAxis)]+binSize),by=binSize)
# Initialize binMeans vector
binMeans <- vector(length = (length(binEdges)-2))
for(iBinEdge in 1:length(binEdges)){
# Initialize/reset flags
flagforbin = logical(length(timeAxis))
# Flag data that fits into current bin
allIdx = 1:length(timeAxis)
idx = allIdx[timeAxis>=binEdges[iBinEdge] & timeAxis<=binEdges[iBinEdge+1]]
flagforbin[idx] = TRUE
# Assign data to bin and mean
binMeans[iBinEdge] = mean(data[flagforbin])
}
return(binMeans)
}
uneqBinMeans(10/60,dosdata$ElapsTime,dosdata$HbO2)
uneqBinMeans	<- function(binSize,timeAxis,data){
# Generate linearlay spaced intervals for binning
binEdges	<- seq(from=timeAxis[1],to=(timeAxis[length(timeAxis)]+binSize),by=binSize)
# Initialize binMeans vector
binMeans <- vector(length = (2))
for(iBinEdge in 1:length(binEdges)){
# Initialize/reset flags
flagforbin = logical(length(timeAxis))
# Flag data that fits into current bin
allIdx = 1:length(timeAxis)
idx = allIdx[timeAxis>=binEdges[iBinEdge] & timeAxis<=binEdges[iBinEdge+1]]
flagforbin[idx] = TRUE
# Assign data to bin and mean
binMeans[iBinEdge] = mean(data[flagforbin])
}
return(binMeans)
}
uneqBinMeans(10/60,dosdata$ElapsTime,dosdata$HbO2)
complete.cases(uneqBinMeans(10/60,dosdata$ElapsTime,dosdata$HbO2))
uneqBinMeans	<- function(binSize,timeAxis,data){
# Generate linearlay spaced intervals for binning
binEdges	<- seq(from=timeAxis[1],to=(timeAxis[length(timeAxis)]+binSize),by=binSize)
# Initialize binMeans vector
binMeans <- vector()
for(iBinEdge in 1:length(binEdges)){
# Initialize/reset flags
flagforbin = logical(length(timeAxis))
# Flag data that fits into current bin
allIdx = 1:length(timeAxis)
idx = allIdx[timeAxis>=binEdges[iBinEdge] & timeAxis<=binEdges[iBinEdge+1]]
flagforbin[idx] = TRUE
# Assign data to bin and mean
binMeans[iBinEdge] = mean(data[flagforbin])
}
# Remove NaN values
binMeans <- binMeans[complete.cases(binMeans)]
return(binMeans)
}
uneqBinMeans(10/60,dosdata$ElapsTime,dosdata$HbO2)
## Function to bin data (unequal bin sizes) in R
# Given an input of bin size, time axis data, and variable
# data:
#	Generate bins of stated bin size,
#	Cut the data into the bins,
#	Obtain the means of each of the bins
# Output: bin means array
uneqBinMeans	<- function(binSize,timeAxis,data){
# Generate linearlay spaced intervals for binning
binEdges	<- seq(from=timeAxis[1],to=(timeAxis[length(timeAxis)]+binSize),by=binSize)
# Initialize binMeans vector
binMeans <- vector()
for(iBinEdge in 1:length(binEdges)){
# Initialize/reset flags
flagforbin = logical(length(timeAxis))
# Flag data that fits into current bin
allIdx = 1:length(timeAxis)
idx = allIdx[timeAxis>=binEdges[iBinEdge] & timeAxis<=binEdges[iBinEdge+1]]
flagforbin[idx] = TRUE
# Assign data to bin and mean
binMeans[iBinEdge] = mean(data[flagforbin])
}
# Remove NaN values
binMeans <- binMeans[complete.cases(binMeans)]
# Output array of means
return(binMeans)
}
# Test code #
dosdata <- read.csv("test.csv")
exedata <- read.csv("exeSample.csv")
uneqBinMeans(10/60,dosdata$ElapsTime,dosdata$HbO2)
uneqBinMeans(10/60,exedata$time,exedata$HR)
