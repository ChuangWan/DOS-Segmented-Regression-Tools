setwd("C:/Users/Brian/Google Drive/MATLAB/Scripts/DOSI Processing/Port to R/Validation tests/separate raw data by study phase/split data into study phases via marker")
load("study phase markers batch file.txt")
read.table("study phase markers batch file.txt", header=TRUE)
table <- read.table("study phase markers batch file.txt", header=TRUE)
table
View(table)
View(table)
setwd("C:/Users/Brian/Google Drive/MATLAB/Scripts/DOSI Processing/Port to R/Validation tests/separate raw data by study phase/split data into study phases via marker")
table <- read.table("study phase markers batch file.txt", header=TRUE)
table
table[[1]]
table[[2]]
table[[3]]
table[[1]][1:end]
table[[1]][1:6]
table[[2]][1]
table[[2]][2]
table[2][2]
table[[2:6]][2]
table[[2:3]][2]
table[[3]][2]
table[[3]][5]
View(table)
csv<-dir('*.csv')
csv<-dir("*.csv")
setwd("C:/Users/Brian/Google Drive/MATLAB/Scripts/DOSI Processing/Port to R/Validation tests/separate raw data by study phase/split data into study phases via marker")
csv<-dir("*.csv")
csv<-dir(pattern="*.csv")
csv
load(csv[2])
read.table(csv[2])
data<-read.table(csv[2])
View(data)
read.csv(csv[2])
data<-read.csv(csv[2])
View(data)
View(data)
which(data$Marker==1)
which(data$Marker==2)
data$Marker[:]
data$Marker[1:length(data$Marker)]
data$Marker[which(data$Marker==1):which(data$Marker==2)]
data$Marker[which(data$Marker==1):which(data$Marker==2)-1]
data$Marker[which(data$Marker==1):(which(data$Marker==2)-1)]
data[1]
data[1][2]
data[[1]][2]
data[[1]][[which(data$Marker==1):(which(data$Marker==2)-1)]]
data[1][2:3]
data[1:5,]
data[[which(data$Marker==1):(which(data$Marker==2)-1)],]
data[which(data$Marker==1):(which(data$Marker==2)-1),]
length(data)
length(data[1,])
length(data[,1])
data[]
# Find indicies for markers
findClosest <- function(value,lookHere){
ind	<- which(abs((value)-lookHere)==min(abs((value)-lookHere)))
return(ind)
}
findClosest(1,data$Marker)
findClosest(4,data$Marker)
findClosest(11.09,data$ElapsTime)
findClosest(11.15,data$ElapsTime)
setwd("C:/Users/Brian/Google Drive/MATLAB/Scripts/DOSI Processing/Port to R/Validation tests/separate raw data by study phase/split data into study phases via marker")
csv<-dir(pattern="*.csv")
csv[2]
read.csv(csv[2],header=TRUE)
pfc <- read.csv(csv[2],header=TRUE)
uneqBinMeans	<- function(binSize,timeAxis,data){
# Generate linearlay spaced intervals for binning
binEdges	<- seq(from=timeAxis[1],to=(timeAxis[length(timeAxis)]+binSize),by=binSize)
# Initialize binMeans vector
binMeans <- vector()
for(iBinEdge in 1:length(binEdges)){
# Initialize/reset flags
flagforbin = logical(length(timeAxis))
# Flag data that fits into current bin
allIdx = 1:length(timeAxis)
idx = allIdx[timeAxis>=binEdges[iBinEdge] & timeAxis<=binEdges[iBinEdge+1]]
flagforbin[idx] = TRUE
# Assign data to bin and mean
binMeans[iBinEdge] = mean(data[flagforbin])
}
# Remove NaN values
binMeans <- binMeans[complete.cases(binMeans)]
# Output array of means
return(binMeans)
}
test<- uneqBinMeans(10/60,pfc$ElapsTime,pfc$Hb)
quote(test)
quote(pfc$ElapsTime)
length(pfc)
pfc[1]
sapply(pfc,FUN=uneqBinMeans())
uneqBinMeans	<- function(data,binSize,timeAxis){
# Generate linearlay spaced intervals for binning
binEdges	<- seq(from=timeAxis[1],to=(timeAxis[length(timeAxis)]+binSize),by=binSize)
# Initialize binMeans vector
binMeans <- vector()
for(iBinEdge in 1:length(binEdges)){
# Initialize/reset flags
flagforbin = logical(length(timeAxis))
# Flag data that fits into current bin
allIdx = 1:length(timeAxis)
idx = allIdx[timeAxis>=binEdges[iBinEdge] & timeAxis<=binEdges[iBinEdge+1]]
flagforbin[idx] = TRUE
# Assign data to bin and mean
binMeans[iBinEdge] = mean(data[flagforbin])
}
# Remove NaN values
binMeans <- binMeans[complete.cases(binMeans)]
# Output array of means
return(binMeans)
}
sapply(pfc,FUN=uneqBinMeans(10/60,pfc$ElapsTime))
uneqBinMeans	<- function(data){
# binSize
binSize <- 10/60
# Time axis
timeAxis <- pfc$ElapsTime
# Generate linearlay spaced intervals for binning
binEdges	<- seq(from=timeAxis[1],to=(timeAxis[length(timeAxis)]+binSize),by=binSize)
# Initialize binMeans vector
binMeans <- vector()
for(iBinEdge in 1:length(binEdges)){
# Initialize/reset flags
flagforbin = logical(length(timeAxis))
# Flag data that fits into current bin
allIdx = 1:length(timeAxis)
idx = allIdx[timeAxis>=binEdges[iBinEdge] & timeAxis<=binEdges[iBinEdge+1]]
flagforbin[idx] = TRUE
# Assign data to bin and mean
binMeans[iBinEdge] = mean(data[flagforbin])
}
# Remove NaN values
binMeans <- binMeans[complete.cases(binMeans)]
# Output array of means
return(binMeans)
}
sapply(pfc,FUN=uneqBinMeans())
sapply(pfc,uneqBinMeans())
lapply(pfc,uneqBinMeans)
sapply(pfc,uneqBinMeans)
testOut<-sapply(pfc,uneqBinMeans)
View(pfc)
View(testOut)
View(testOut)
testOut <-data.frame(testOut)
View(testOut)
uneqBinMeans	<- function(data){
# binSize
binSize <- 10/60
# Time axis
timeAxis <- data$ElapsTime
# Generate linearlay spaced intervals for binning
binEdges	<- seq(from=timeAxis[1],to=(timeAxis[length(timeAxis)]+binSize),by=binSize)
# Initialize binMeans vector
binMeans <- vector()
for(iBinEdge in 1:length(binEdges)){
# Initialize/reset flags
flagforbin = logical(length(timeAxis))
# Flag data that fits into current bin
allIdx = 1:length(timeAxis)
idx = allIdx[timeAxis>=binEdges[iBinEdge] & timeAxis<=binEdges[iBinEdge+1]]
flagforbin[idx] = TRUE
# Assign data to bin and mean
binMeans[iBinEdge] = mean(data[flagforbin])
}
# Remove NaN values
binMeans <- binMeans[complete.cases(binMeans)]
# Output array of means
return(binMeans)
}
testOut<-sapply(pfc,uneqBinMeans)
uneqBinMeans	<- function(data,binSize,timeAxis){
# binSize
#binSize <- 10/60
# Time axis
#timeAxis <- data$ElapsTime
# Generate linearlay spaced intervals for binning
binEdges	<- seq(from=timeAxis[1],to=(timeAxis[length(timeAxis)]+binSize),by=binSize)
# Initialize binMeans vector
binMeans <- vector()
for(iBinEdge in 1:length(binEdges)){
# Initialize/reset flags
flagforbin = logical(length(timeAxis))
# Flag data that fits into current bin
allIdx = 1:length(timeAxis)
idx = allIdx[timeAxis>=binEdges[iBinEdge] & timeAxis<=binEdges[iBinEdge+1]]
flagforbin[idx] = TRUE
# Assign data to bin and mean
binMeans[iBinEdge] = mean(data[flagforbin])
}
# Remove NaN values
binMeans <- binMeans[complete.cases(binMeans)]
# Output array of means
return(binMeans)
}
testOut<-sapply(pfc,uneqBinMeans,binSize=10/60,timeAxis=pfc$ElapsTime)
View(testOut)
testOut<-data.frame(sapply(pfc,uneqBinMeans,binSize=10/60,timeAxis=pfc$ElapsTime))
load("splitByMarker.r")
sourceDirectory
source
library("R.utils", lib.loc="~/R/win-library/3.1")
sourceDirectory()
wdd
wd
testFcn <- dget("splitByMarker.r")
testFcn <- dget("splitByMarker.r")
testFcn <- dget("splitByMarker.r")
testFcn <- dget("splitByMarker.r")
testFcn <- dget("splitByMarker.r")
setwd("C:/Users/Brian/Google Drive/MATLAB/Scripts/DOSI Processing/Port to R/Validation tests/separate raw data by study phase/split data into study phases via marker")
dir.create("tmp")
setwd("tmp")
dir.create("tmp2")
setwd("..")
dir.create("tmp3")
source("genBatchFilePhaseSep.r")
setwd("C:/Users/Brian/Google Drive/MATLAB/Scripts/DOSI Processing/Port to R/Validation tests/separate raw data by study phase/generate batch file for splitting data by phases")
source("genBatchFilePhaseSep.r")
View(generateBatch)
View(uneqBinMeans)
View(generateBatch)
reorganized[1] <- pfc[1]
reorganized <- data.frame(pfc$ElapsTime, pfc$HbO2)
View(reorganized)
reorganized <- data.frame(pfc$ElapsTime, pfc$HbO2,pfc$tHb,pfc$SO2,pfc$ElapsTime,pfc$Marker,pfc$SC1,pfc$SC2,pfc$SC3,pfc$AC1,pfc$AC2,pfc$AC3,pfc$PL1,pfc$PL2,pfc$PL3)
View(reorganized)
reorganized <- data.frame(pfc$HbO2,pfc$Hb,pfc$tHb,pfc$SO2,pfc$ElapsTime,pfc$Marker,pfc$SC1,pfc$SC2,pfc$SC3,pfc$AC1,pfc$AC2,pfc$AC3,pfc$PL1,pfc$PL2,pfc$PL3)
reorganized[15,1]
View(reorganized)
reorganized[15,]
paste(gsub(".csv","",csv[1]),"Processed",sep=" ")
dir.create("temp")
dir.create("temp")
